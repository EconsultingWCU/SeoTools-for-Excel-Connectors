<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Music" Title="Spotify Insights" Id="SpotifyInsights" RequireVersion="7.0" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/SpotifyInsights.xml" HelpUrl="http://seotoolsforexcel.com/spotify-insights/" HelpText="Documentation">

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/spotify-insights/">
    <Text Id="Token" Title="Token" Required="true"/>
    <Text Id="Secret" Title="Secret" Required="true"/>
  </Settings>

  <Resources>
    <Resource Id="Error">
      <Fail>
				<JsonPath Expr="error"/>
      </Fail>
    </Resource>
    <Resource Id="Fetch">
			<Fetch>
				<HttpSettings>
					<RequestContentType>application/x-www-form-urlencoded</RequestContentType>
					<RequestHeaders>
						<Header Name='Authorization'>Bearer @(Model.Token)</Header>
						<Header Name='Accept'></Header>
					</RequestHeaders>
				</HttpSettings>
				<Fetch.Url>
					<![CDATA[
					https://provider-api.spotify.com/v1/analytics/aggregated/@(Model.Resource)
					?date_from=@(((DateTime)Model.DateInterval.StartDate).ToString("yyyy-MM-dd"))
					&date_to=@(((DateTime)Model.DateInterval.EndDate).ToString("yyyy-MM-dd"))
					]]>
				</Fetch.Url>
			</Fetch>
    </Resource>
    <Resource Id="Paramaters">
			<Parameters>
				<Text Id="Resource" Title="Resource URI" Debug.DefaultValue="spotify:track:5rqvpEqOkiu2k6K0UTZmzR" HelpText="For example spotify:artist:########################" Required="true"/>
				<DateInterval Id="DateInterval" Title="Date Interval" Required="false"/>
			</Parameters>
			<Prepare>
				<Connector Id="GenerateToken"/>
			</Prepare>
    </Resource>
  </Resources>

  <RestConnector Id="GenerateToken" Title="GenerateToken" Hidden="true" HelpUrl="https://developer.spotify.com/private-documentation/provider_APIs-6-analytics-API-documentation">
    <Fetch>
      <HttpSettings>
        <RequestMethod>POST</RequestMethod>
        <RequestContentType>application/x-www-form-urlencoded</RequestContentType>
        <RequestHeaders>
					<Header Name='Accept'></Header>
          <Header Name='Authorization'>Basic @(CreateBasicAuth())</Header>
        </RequestHeaders>
				 <RequestForm>
          <Param Name='grant_type'>client_credentials</Param>
				</RequestForm>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://accounts.spotify.com/api/token
        ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="access_token" Id="Token"/>
    </Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="StreamsDimension" Title="Streams by Dimension">
			<Parameters>
				<Select Id="Dimension" Title="Select Table Dimension" Required="false" DefaultValue="total">
					<DataSource>
						<Item Id="total" Title="Total"/>
						<Item Id="country" Title="Country"/>
						<Item Id="product" Title="Product"/>
						<Item Id="sex" Title="Sex"/>
						<Item Id="age" Title="Age"/>
					</DataSource>
				</Select>
				<Text Id="Resource" Title="Resource URI" Debug.DefaultValue="spotify:track:5rqvpEqOkiu2k6K0UTZmzR" HelpText="For example spotify:artist:########################" Required="true"/>
				<DateInterval Id="DateInterval" Title="Date Interval" Required="false"/>
			</Parameters>
			<Prepare>
				<Connector Id="GenerateToken"/>
			</Prepare>
			<Fetch>
				<HttpSettings>
					<RequestContentType>application/x-www-form-urlencoded</RequestContentType>
					<RequestHeaders>
						<Header Name='Authorization'>Bearer @(Model.Token)</Header>
						<Header Name='Accept'></Header>
					</RequestHeaders>
				</HttpSettings>
				<Fetch.Url>
					<![CDATA[
					https://provider-api.spotify.com/v1/analytics/aggregated/@(Model.Resource)
					?date_from=@(((DateTime)Model.DateInterval.StartDate).ToString("yyyy-MM-dd"))
					&date_to=@(((DateTime)Model.DateInterval.EndDate).ToString("yyyy-MM-dd"))
					]]>
				</Fetch.Url>
			</Fetch>
			<Parse>
				<JsonPath Expr="keys($..@(Model.Dimension))">
					<Compute Id="Item" Title="Item" Converter="Auto">
						<Compute.Expr>
							<![CDATA[
							@{
								var dictLangs = new Dictionary<string, string>();
								string result = Model.Inp;

								dictLangs.Add("AF", "Afghanistan");
								dictLangs.Add("AX", "Åland Islands");
								dictLangs.Add("AL", "Albania");
								dictLangs.Add("DZ", "Algeria");
								dictLangs.Add("AS", "American Samoa");
								dictLangs.Add("AD", "Andorra");
								dictLangs.Add("AO", "Angola");
								dictLangs.Add("AI", "Anguilla");
								dictLangs.Add("AQ", "Antarctica");
								dictLangs.Add("AG", "Antigua and Barbuda");
								dictLangs.Add("AR", "Argentina");
								dictLangs.Add("AM", "Armenia");
								dictLangs.Add("AW", "Aruba");
								dictLangs.Add("AU", "Australia");
								dictLangs.Add("AT", "Austria");
								dictLangs.Add("AZ", "Azerbaijan");
								dictLangs.Add("BH", "Bahrain");
								dictLangs.Add("BS", "Bahamas");
								dictLangs.Add("BD", "Bangladesh");
								dictLangs.Add("BB", "Barbados");
								dictLangs.Add("BY", "Belarus");
								dictLangs.Add("BE", "Belgium");
								dictLangs.Add("BZ", "Belize");
								dictLangs.Add("BJ", "Benin");
								dictLangs.Add("BM", "Bermuda");
								dictLangs.Add("BT", "Bhutan");
								dictLangs.Add("BO", "Bolivia, Plurinational State of");
								dictLangs.Add("BQ", "Bonaire, Sint Eustatius and Saba");
								dictLangs.Add("BA", "Bosnia and Herzegovina");
								dictLangs.Add("BW", "Botswana");
								dictLangs.Add("BV", "Bouvet Island");
								dictLangs.Add("BR", "Brazil");
								dictLangs.Add("IO", "British Indian Ocean Territory");
								dictLangs.Add("BN", "Brunei Darussalam");
								dictLangs.Add("BG", "Bulgaria");
								dictLangs.Add("BF", "Burkina Faso");
								dictLangs.Add("BI", "Burundi");
								dictLangs.Add("KH", "Cambodia");
								dictLangs.Add("CM", "Cameroon");
								dictLangs.Add("CA", "Canada");
								dictLangs.Add("CV", "Cape Verde");
								dictLangs.Add("KY", "Cayman Islands");
								dictLangs.Add("CF", "Central African Republic");
								dictLangs.Add("TD", "Chad");
								dictLangs.Add("CL", "Chile");
								dictLangs.Add("CN", "China");
								dictLangs.Add("CX", "Christmas Island");
								dictLangs.Add("CC", "Cocos (Keeling) Islands");
								dictLangs.Add("CO", "Colombia");
								dictLangs.Add("KM", "Comoros");
								dictLangs.Add("CG", "Congo");
								dictLangs.Add("CD", "Congo, the Democratic Republic of the");
								dictLangs.Add("CK", "Cook Islands");
								dictLangs.Add("CR", "Costa Rica");
								dictLangs.Add("CI", "Côte d'Ivoire");
								dictLangs.Add("HR", "Croatia");
								dictLangs.Add("CU", "Cuba");
								dictLangs.Add("CW", "Curaçao");
								dictLangs.Add("CY", "Cyprus");
								dictLangs.Add("CZ", "Czech Republic");
								dictLangs.Add("DK", "Denmark");
								dictLangs.Add("DJ", "Djibouti");
								dictLangs.Add("DM", "Dominica");
								dictLangs.Add("DO", "Dominican Republic");
								dictLangs.Add("EC", "Ecuador");
								dictLangs.Add("EG", "Egypt");
								dictLangs.Add("SV", "El Salvador");
								dictLangs.Add("GQ", "Equatorial Guinea");
								dictLangs.Add("ER", "Eritrea");
								dictLangs.Add("EE", "Estonia");
								dictLangs.Add("ET", "Ethiopia");
								dictLangs.Add("FK", "Falkland Islands (Malvinas)");
								dictLangs.Add("FO", "Faroe Islands");
								dictLangs.Add("FJ", "Fiji");
								dictLangs.Add("FI", "Finland");
								dictLangs.Add("FR", "France");
								dictLangs.Add("GF", "French Guiana");
								dictLangs.Add("PF", "French Polynesia");
								dictLangs.Add("TF", "French Southern Territories");
								dictLangs.Add("GA", "Gabon");
								dictLangs.Add("GM", "Gambia");
								dictLangs.Add("GE", "Georgia");
								dictLangs.Add("DE", "Germany");
								dictLangs.Add("GH", "Ghana");
								dictLangs.Add("GI", "Gibraltar");
								dictLangs.Add("GR", "Greece");
								dictLangs.Add("GL", "Greenland");
								dictLangs.Add("GD", "Grenada");
								dictLangs.Add("GP", "Guadeloupe");
								dictLangs.Add("GU", "Guam");
								dictLangs.Add("GT", "Guatemala");
								dictLangs.Add("GG", "Guernsey");
								dictLangs.Add("GN", "Guinea");
								dictLangs.Add("GW", "Guinea-Bissau");
								dictLangs.Add("GY", "Guyana");
								dictLangs.Add("HT", "Haiti");
								dictLangs.Add("HM", "Heard Island and McDonald Islands");
								dictLangs.Add("VA", "Holy See (Vatican City State)");
								dictLangs.Add("HN", "Honduras");
								dictLangs.Add("HK", "Hong Kong");
								dictLangs.Add("HU", "Hungary");
								dictLangs.Add("IS", "Iceland");
								dictLangs.Add("IN", "India");
								dictLangs.Add("ID", "Indonesia");
								dictLangs.Add("IR", "Iran, Islamic Republic of");
								dictLangs.Add("IQ", "Iraq");
								dictLangs.Add("IE", "Ireland");
								dictLangs.Add("IM", "Isle of Man");
								dictLangs.Add("IL", "Israel");
								dictLangs.Add("IT", "Italy");
								dictLangs.Add("JM", "Jamaica");
								dictLangs.Add("JP", "Japan");
								dictLangs.Add("JE", "Jersey");
								dictLangs.Add("JO", "Jordan");
								dictLangs.Add("KZ", "Kazakhstan");
								dictLangs.Add("KE", "Kenya");
								dictLangs.Add("KI", "Kiribati");
								dictLangs.Add("KP", "Korea, Democratic People's Republic of");
								dictLangs.Add("KR", "Korea, Republic of");
								dictLangs.Add("KW", "Kuwait");
								dictLangs.Add("KG", "Kyrgyzstan");
								dictLangs.Add("LA", "Lao People's Democratic Republic");
								dictLangs.Add("LV", "Latvia");
								dictLangs.Add("LB", "Lebanon");
								dictLangs.Add("LS", "Lesotho");
								dictLangs.Add("LR", "Liberia");
								dictLangs.Add("LY", "Libya");
								dictLangs.Add("LI", "Liechtenstein");
								dictLangs.Add("LT", "Lithuania");
								dictLangs.Add("LU", "Luxembourg");
								dictLangs.Add("MO", "Macao");
								dictLangs.Add("MK", "Macedonia, the Former Yugoslav Republic of");
								dictLangs.Add("MG", "Madagascar");
								dictLangs.Add("MW", "Malawi");
								dictLangs.Add("MY", "Malaysia");
								dictLangs.Add("MV", "Maldives");
								dictLangs.Add("ML", "Mali");
								dictLangs.Add("MT", "Malta");
								dictLangs.Add("MH", "Marshall Islands");
								dictLangs.Add("MQ", "Martinique");
								dictLangs.Add("MR", "Mauritania");
								dictLangs.Add("MU", "Mauritius");
								dictLangs.Add("YT", "Mayotte");
								dictLangs.Add("MX", "Mexico");
								dictLangs.Add("FM", "Micronesia, Federated States of");
								dictLangs.Add("MD", "Moldova, Republic of");
								dictLangs.Add("MC", "Monaco");
								dictLangs.Add("MN", "Mongolia");
								dictLangs.Add("ME", "Montenegro");
								dictLangs.Add("MS", "Montserrat");
								dictLangs.Add("MA", "Morocco");
								dictLangs.Add("MZ", "Mozambique");
								dictLangs.Add("MM", "Myanmar");
								dictLangs.Add("NA", "Namibia");
								dictLangs.Add("NR", "Nauru");
								dictLangs.Add("NP", "Nepal");
								dictLangs.Add("NL", "Netherlands");
								dictLangs.Add("NC", "New Caledonia");
								dictLangs.Add("NZ", "New Zealand");
								dictLangs.Add("NI", "Nicaragua");
								dictLangs.Add("NE", "Niger");
								dictLangs.Add("NG", "Nigeria");
								dictLangs.Add("NU", "Niue");
								dictLangs.Add("NF", "Norfolk Island");
								dictLangs.Add("MP", "Northern Mariana Islands");
								dictLangs.Add("NO", "Norway");
								dictLangs.Add("OM", "Oman");
								dictLangs.Add("PK", "Pakistan");
								dictLangs.Add("PW", "Palau");
								dictLangs.Add("PS", "Palestine, State of");
								dictLangs.Add("PA", "Panama");
								dictLangs.Add("PG", "Papua New Guinea");
								dictLangs.Add("PY", "Paraguay");
								dictLangs.Add("PE", "Peru");
								dictLangs.Add("PH", "Philippines");
								dictLangs.Add("PN", "Pitcairn");
								dictLangs.Add("PL", "Poland");
								dictLangs.Add("PT", "Portugal");
								dictLangs.Add("PR", "Puerto Rico");
								dictLangs.Add("QA", "Qatar");
								dictLangs.Add("RE", "Réunion");
								dictLangs.Add("RO", "Romania");
								dictLangs.Add("RU", "Russian Federation");
								dictLangs.Add("RW", "Rwanda");
								dictLangs.Add("BL", "Saint Barthélemy");
								dictLangs.Add("SH", "Saint Helena, Ascension and Tristan da Cunha");
								dictLangs.Add("KN", "Saint Kitts and Nevis");
								dictLangs.Add("LC", "Saint Lucia");
								dictLangs.Add("MF", "Saint Martin (French part)");
								dictLangs.Add("PM", "Saint Pierre and Miquelon");
								dictLangs.Add("VC", "Saint Vincent and the Grenadines");
								dictLangs.Add("WS", "Samoa");
								dictLangs.Add("SM", "San Marino");
								dictLangs.Add("ST", "Sao Tome and Principe");
								dictLangs.Add("SA", "Saudi Arabia");
								dictLangs.Add("SN", "Senegal");
								dictLangs.Add("RS", "Serbia");
								dictLangs.Add("SC", "Seychelles");
								dictLangs.Add("SL", "Sierra Leone");
								dictLangs.Add("SG", "Singapore");
								dictLangs.Add("SX", "Sint Maarten (Dutch part)");
								dictLangs.Add("SK", "Slovakia");
								dictLangs.Add("SI", "Slovenia");
								dictLangs.Add("SB", "Solomon Islands");
								dictLangs.Add("SO", "Somalia");
								dictLangs.Add("ZA", "South Africa");
								dictLangs.Add("GS", "South Georgia and the South Sandwich Islands");
								dictLangs.Add("SS", "South Sudan");
								dictLangs.Add("ES", "Spain");
								dictLangs.Add("LK", "Sri Lanka");
								dictLangs.Add("SD", "Sudan");
								dictLangs.Add("SR", "Suriname");
								dictLangs.Add("SJ", "Svalbard and Jan Mayen");
								dictLangs.Add("SZ", "Swaziland");
								dictLangs.Add("SE", "Sweden");
								dictLangs.Add("CH", "Switzerland");
								dictLangs.Add("SY", "Syrian Arab Republic");
								dictLangs.Add("TW", "Taiwan, Province of China");
								dictLangs.Add("TJ", "Tajikistan");
								dictLangs.Add("TZ", "Tanzania, United Republic of");
								dictLangs.Add("TH", "Thailand");
								dictLangs.Add("TL", "Timor-Leste");
								dictLangs.Add("TG", "Togo");
								dictLangs.Add("TK", "Tokelau");
								dictLangs.Add("TO", "Tonga");
								dictLangs.Add("TT", "Trinidad and Tobago");
								dictLangs.Add("TN", "Tunisia");
								dictLangs.Add("TR", "Turkey");
								dictLangs.Add("TM", "Turkmenistan");
								dictLangs.Add("TC", "Turks and Caicos Islands");
								dictLangs.Add("TV", "Tuvalu");
								dictLangs.Add("UG", "Uganda");
								dictLangs.Add("UA", "Ukraine");
								dictLangs.Add("AE", "United Arab Emirates");
								dictLangs.Add("GB", "United Kingdom");
								dictLangs.Add("US", "United States");
								dictLangs.Add("UM", "United States Minor Outlying Islands");
								dictLangs.Add("UY", "Uruguay");
								dictLangs.Add("UZ", "Uzbekistan");
								dictLangs.Add("VU", "Vanuatu");
								dictLangs.Add("VE", "Venezuela, Bolivarian Republic of");
								dictLangs.Add("VN", "Viet Nam");
								dictLangs.Add("VG", "Virgin Islands, British");
								dictLangs.Add("VI", "Virgin Islands, U.S.");
								dictLangs.Add("WF", "Wallis and Futuna");
								dictLangs.Add("EH", "Western Sahara");
								dictLangs.Add("YE", "Yemen");
								dictLangs.Add("ZM", "Zambia");
								dictLangs.Add("ZW", "Zimbabwe");

								if (dictLangs.ContainsKey(Model.Inp)) {
									result = dictLangs[Model.Inp];
								}
							}
							@result
							]]>
						</Compute.Expr>
						<JsonPath Expr="key" Id="Inp"/>
					</Compute>
					<Compute Id="Streams" Title="Streams" Converter="Auto">
						<Compute.Expr>
							<![CDATA[
							@{
								string[] raw = Regex.Replace(Model.Inp, @"[^\d,]", "").Split(',');
								int[] convertedItems = Array.ConvertAll<string, int>(raw, int.Parse);
								int total = convertedItems.Sum();
							}
							@total
							]]>
						</Compute.Expr>
						<JsonPath Expr="value" Id="Inp"/>
					</Compute>
				</JsonPath>
			</Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="DailyStreams" Title="Daily Streams">
		<Resource Id="Paramaters"/>
		<Resource Id="Fetch"/>
		<Parse>
			<JsonPath Expr="$..total.all.*">
				<JsonPath Expr="." Id="Streams" Converter="Auto"/>
			</JsonPath>
		</Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="DailyStreamsProduct" Title="Daily Streams by Product">
		<Resource Id="Paramaters"/>
		<Resource Id="Fetch"/>
			<Parse>
				<JsonPath Expr="$..product.premium.*">
					<JsonPath Expr="." Id="Premium" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..product.free.*">
					<JsonPath Expr="." Id="Free" Converter="Auto"/>
				</JsonPath>
			</Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="DailyStreamsGender" Title="Daily Streams by Gender">
		<Resource Id="Paramaters"/>
		<Resource Id="Fetch"/>
			<Parse>
				<JsonPath Expr="$..sex.male.*">
					<JsonPath Expr="." Id="Male" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..sex.female.*">
					<JsonPath Expr="." Id="Female" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..sex.neutral.*">
					<JsonPath Expr="." Id="Neutral" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..sex.unknown.*">
					<JsonPath Expr="." Id="Unknown" Converter="Auto"/>
				</JsonPath>
			</Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RestConnector Id="DailyStreamsAge" Title="Daily Streams by Age">
		<Resource Id="Paramaters"/>
		<Resource Id="Fetch"/>
			<Parse>
				<JsonPath Expr="$..age.0-17.*">
					<JsonPath Expr="." Id="0-17" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.18-22.*">
					<JsonPath Expr="." Id="18-22" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.23-27.*">
					<JsonPath Expr="." Id="23-27" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.28-34.*">
					<JsonPath Expr="." Id="28-34" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.35-44.*">
					<JsonPath Expr="." Id="35-44" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.45-59.*">
					<JsonPath Expr="." Id="45-59" Converter="Auto"/>
				</JsonPath>
				<JsonPath Expr="$..age.60-150.*">
					<JsonPath Expr="." Id="60-150" Converter="Auto"/>
				</JsonPath>
			</Parse>
		<Resource Id="Error"/>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string CreateBasicAuth() {
      return Convert.ToBase64String(ASCIIEncoding.ASCII.GetBytes(Model.Token + ":" + Model.Secret));
    }
    ]]>
  </RazorFunctions>

</Suite>
