<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Products &amp; Reviews" Title="Semantics3" Id="Semantics3" RequireVersion="6.0.0" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Semantics3.xml" HelpUrl="http://seotoolsforexcel.com/semantics3/" HelpText="Documentation">

  <Author Name="Victor Sandberg" Url="http://community.seotoolsforexcel.com/users/diskborste/activity" />
  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/semantics3/">
    <Text Id="OAuthConsumerKey" Title="Key" Required="false" HelpUrl="http://seotoolsforexcel.com/semantics3/"/>
    <Text Id="OAuthConsumerSecret" Title="Secret" Required="false" HelpUrl="http://seotoolsforexcel.com/semantics3/"/>
  </Settings>

  <RestConnector Id="Semantics3" Title="Semantics3" HelpUrl="https://docs.semantics3.com/reference#request-structure">
    <Parameters>
      <Text Id="InputQuery" Title="Filter by Search Query" DefaultValue="" Debug.DefaultValue="iphone" Required="false" HelpText="Run free-text search with any input string, a la Google search."/>
      <Text Id="Brand" Title="Filter by Brand Name" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText="Retrieve products by the brand (or manufacturer) that they belong to. A brand (or manufacturer) is identified by its name."/>
      <Text Id="Site" Title="Filter by Site" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText="for example 'walmart.com'"/>
      <Text Id="Url" Title="Filter by URL" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText="for example 'http://www.walmart.com/ip/37065534'"/>
      <Text Id="CatId" Title="Filter by Category Id" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText="Retrieve products by their category IDs."/>
      <Text Id="EAN" Title="Filter by EAN Number" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText=""/>
      <Text Id="UPC" Title="Filter by UPC Number" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText=""/>
      <Text Id="SEM3" Title="Filter by Semantics3 Id" DefaultValue="" Debug.DefaultValue="" Required="false" HelpText=""/>
      <Checkbox Id="ActiveOffers" Title="Active Offers Only" DefaultValue="False" HelpText="Only return those offers that are deemed active."/>
    </Parameters>
    <Paging PageSize="10" EvenPages="true">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="total_results_count"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestContentType>application/x-www-form-urlencoded</RequestContentType>
        <RequestHeaders>
          <Header Name='Authorization'>OAuth @(CreateOauthInitial("products"))</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
				<![CDATA[
				https://api.semantics3.com/v1/products?
				q=@Getquery("products")
				]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
			<JsonPath Expr="results.*">
				<JsonPath Expr="sem3_id" Id="Id" Title="Id" Converter="String" HelpText="Semantics3 ID of the product."/>
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText="Name of the product. All products will contain a name."/>
				<JsonPath Expr="brand" Id="Brand" Title="Brand" Converter="String" DefaultValue="" HelpText="Brand name of the product." />
				<JsonPath Expr="cat_id" Id="CategoryId" Title="Category Id" Converter="Long" HelpText="Best estimate category ID of the product."/>
				<JsonPath Expr="category" Id="Category" Title="Category" Converter="String" HelpText="Name of the category with which the product is associated."/>
				<JsonPath Expr="created_at" Id="Created" Title="Created" Converter="DateTime" Converter.SourceFormat="Unix" HelpText="Timestamp at which this product was inserted into Semantics3’s database."/>
				<JsonPath Expr="updated_at" Id="Updated" Title="Updated" Converter="DateTime" Converter.SourceFormat="Unix" HelpText="Timestamp at which the data in this product response was last refreshed."/>
				<JsonPath Expr="images[0]" Id="Image" Title="Image" Converter="String" DefaultValue="" HelpText=""/>
				<JsonPath Expr="ean" Id="EAN" Title="EAN" Converter="String" DefaultValue="" HelpText="13-digit International Article Number (EAN) of the product."/>
				<JsonPath Expr="upc" Id="UPC" Title="UPC" Converter="String" DefaultValue="" HelpText="12-digit Universal Product Code (UPC) code of the product."/>
				<JsonPath Expr="price" Id="Price" Title="Price" Converter="String" DefaultValue="" HelpText="This price is selected from among all the offers and list prices associated with the product."/>
				<JsonPath Expr="price_currency" Id="Currency" Title="Currency" Converter="String" DefaultValue="" HelpText="The ISO 4217 currency value."/>
				<JsonPath Expr="manufacturer" Id="Manufacturer" Title="Manufacturer" Converter="String" DefaultValue="" HelpText="Manufacturer of the product."/>
				<JsonPath Expr="model" Id="Model" Title="Model" Converter="String" DefaultValue="" HelpText="Model of the product."/>
			</JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="message"/>
    </Fail>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[

    string CreateOauthInitial(string endpoint){
      string oauth = "";
      string nonce = GenerateRandomString(20);
      string timestamp = GetTimestamp().ToString();

      string parameters = getParameters(endpoint, nonce, timestamp, true);
      string signatureBase = GetSignatureBase("https://api.semantics3.com/v1/products", parameters);
			string signature = Utils.HmacSha1(signatureBase, Utils.UrlEncode(Model.OAuthConsumerSecret) + "&");

      oauth = getParameters(endpoint, nonce, timestamp, false);
      oauth += ",oauth_signature=" + "\"" + Utils.UrlEncode(signature) + "\"";

      return oauth;
    }

    string getParameters(string endpoint, string nonce, string timestamp, bool url = true){
      Dictionary<string, string> parameters = new Dictionary<string, string>();
      string generated = "";

      parameters.Add("oauth_consumer_key", Model.OAuthConsumerKey);
      parameters.Add("oauth_nonce", nonce);
      parameters.Add("oauth_signature_method", "HMAC-SHA1");
      parameters.Add("oauth_timestamp", timestamp);
      parameters.Add("oauth_version", "1.0");

      if (url){
				parameters.Add("q", Getquery(endpoint));
        generated = String.Join("&", parameters.Select(x => x.Key + "=" + x.Value).ToArray());
      }
      else {
        generated = String.Join(",", parameters.Select(x => x.Key + "=" + "\"" + x.Value + "\"").ToArray());
      }
      return generated;
    }

    public string GenerateRandomString(int length) {
      Random random = new Random();
      string characters = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
      StringBuilder result = new StringBuilder(length);
      for (int i = 0; i < length; i++) {
        result.Append(characters[random.Next(characters.Length)]);
      }
      return result.ToString();
    }

    long GetTimestamp(){
     return DateTimeOffset.UtcNow.ToUnixTimeSeconds();
    }

    string GetSignatureBase(string url, string parameters){
      return "GET&" + Utils.UrlEncode(url) + "&" + Utils.UrlEncode(parameters);
    }

    string Getquery(string endpoint){
			return(GetProductList());
    }

    string GetProductList(){
			var dict = new Dictionary<string, object>();

			if(!string.IsNullOrEmpty(Model.InputQuery))
				dict.Add("search", Regex.Replace(Model.InputQuery, @"\s", "%20"));

			if(!string.IsNullOrEmpty(Model.Brand))
				dict.Add("brand", Regex.Replace(Model.Brand, @"\s", "%20"));

			if(!string.IsNullOrEmpty(Model.CatId))
				dict.Add("cat_id",Model.CatId);

			if(!string.IsNullOrEmpty(Model.EAN))
				dict.Add("ean", Model.EAN);

			if(!string.IsNullOrEmpty(Model.UPC))
				dict.Add("upc", Model.UPC);

			if(!string.IsNullOrEmpty(Model.SEM3))
				dict.Add("sem3_id", Model.SEM3);

			if(!string.IsNullOrEmpty(Model.Site))
				dict.Add("site", Model.Site);

			if(!string.IsNullOrEmpty(Model.Url))
				dict.Add("url", Model.Url);

			if(Model.ActiveOffers == true)
				dict.Add("activeoffersonly", 1);

			dict.Add("limit", Model.PageCursor.NextTake);
			dict.Add("offset", Model.PageCursor.NextSkip);

			var output = Newtonsoft.Json.JsonConvert.SerializeObject(dict);

			return Utils.UrlEncode(output);
    }

    ]]>
  </RazorFunctions>

</Suite>
