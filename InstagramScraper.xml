<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="Instagram Scraper" Id="InstagramScraper" Category="Social" RequireVersion="8.2" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/Instagramscraper.xml">

  <Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

	<RestConnector Title="Account Lookup" Id="AccountLookupUsername" Group="Accounts">
    <Parameters>
      <Text Id="User" Title="Username or URL" Required="true" Debug.DefaultValue="zaralarsson"/>
    </Parameters>
		<Fetch Url="@(FetchUserString())"/>
    <Parse>
      <Regex Expr="&quot;edge_followed_by&quot;:{&quot;count&quot;:(\d+)}" Id="Followers" Title="Followers"  Group="1" Converter="Int"/>
      <Regex Expr="&quot;edge_follow&quot;:{&quot;count&quot;:(\d+)}" Id="Follows" Title="Follows" Group="1" Converter="Int"/>
      <Regex Expr="&quot;edge_owner_to_timeline_media&quot;:{&quot;count&quot;:(\d+)" Id="Posts" Title="Posts" Group="1" Converter="Int"/>
      <Regex Expr="&quot;owner&quot;:{&quot;id&quot;:&quot;(\d+)&quot;" Id="UserId" Title="User Id" Group="1" Converter="Auto"/>
      <Regex Expr="&quot;is_private&quot;:(\w+)" Id="Private" Title="Private"  Group="1" Converter="String"/>
			<Compute Expr="@System.Text.RegularExpressions.Regex.Unescape(Model.Inp)" Id="Bio" Title="Bio" DefaultValue="">
				<Regex Expr="&quot;description&quot;:&quot;(.*?)&quot;" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
			<Regex Expr="&quot;external_url&quot;:&quot;(.*?)&quot;" Id="ExternalUrl" Title="External URL" Group="1" Converter="String" DefaultValue=""/>
			<Compute Expr="@(DecodeAvatarUrl(Model.Inp))" Id="Avatar" Title="Avatar" DefaultValue="">
				<Regex Expr="&quot;profile_pic_url&quot;:&quot;(.*?)&quot;" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
    </Parse>
  </RestConnector>

  <RestConnector Id="PostLookup" Title="Post Lookup" Group="Posts">
    <Parameters>
      <Text Id="Post" Title="Post URL or Shortcode" Required="true" Debug.DefaultValue="https://www.instagram.com/p/BhCZUzgAOhT/"/>
    </Parameters>
    <Fetch Url="@FetchPostString()"/>
    <Parse>
			<Compute Expr="@FetchPostString()" Id="Url" Title="URL" DefaultValue=""/>
      <Regex Expr="taken_at_timestamp&quot;:(\d+)" Id="Created" Title="Created" Group="1" Converter="DateTime" Converter.SourceFormat="Unix" DefaultValue=""/>
      <Regex Expr="media_preview_like&quot;:{&quot;count&quot;:(\d+)" Id="Likes" Title="Likes" Group="1" Converter="Auto" DefaultValue=""/>
      <Regex Expr="media_preview_comment&quot;:{&quot;count&quot;:(\d+)" Id="Comments" Title="Comments" Group="1" Converter="Auto" DefaultValue=""/>
      <Regex Expr="&quot;video_view_count&quot;:(\d+)" Id="VideoViews" Title="Video Views" Group="1" Converter="Auto" DefaultValue=""/>
			<Compute Expr="@Model.Inp" Id="Type" Title="Type" DefaultValue="">
				<Regex Expr="typename&quot;:&quot;Graph(\w+)" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
      <Regex Expr="&quot;display_resources&quot;:\[{&quot;src&quot;:&quot;(.*?)&quot;" Id="ImageUrl" Title="Display URL" Group="1" Converter="String" DefaultValue=""/>
      <XPath Expr="//meta[@@property='instapp:owner_user_id']" Title="User Id" Id="UserId" Attribute="content" Converter="Auto" DefaultValue=""/>
			<Regex Expr="username&quot;:&quot;([\w\.]+)" Id="Username" Title="Username" Group="1" Converter="String" DefaultValue=""/>
			<Compute Expr="https://www.instagram.com/@(Model.Inp)" Id="UserUrl" Title="User URL" DefaultValue="">
				<Regex Expr="username&quot;:&quot;([\w\.]+)" Id="Inp" Group="1" DefaultValue=""/>
			</Compute>
    </Parse>
  </RestConnector>

  <RestConnector Id="PostLookupOembed" Title="Post Lookup via Oembed" Group="Posts">
    <Parameters>
      <Text Id="Post" Title="Post URL or Shortcode" Required="true" Debug.DefaultValue="https://www.instagram.com/p/BhCZUzgAOhT/"/>
    </Parameters>
		<Fetch Url="https://api.instagram.com/oembed/?url=@FetchPostString()"/>
    <Parse>
      <JsonPath Expr="media_id" Id="PostId" Title="Post Id"/>
      <Regex Expr="datetime=\\&quot;(.*?)\\&quot;" Id="Created" Title="Created" Group="1" Converter="DateTime"/>
      <JsonPath Expr="title" Id="Text" Title="Caption"/>
      <JsonPath Expr="author_id" Id="AuthorId" Title="Author Id" Converter="Auto"/>
      <JsonPath Expr="thumbnail_url" Id="Thumbnail" Title="Thumbnail"/>
      <JsonPath Expr="author_name" Id="Author" Title="User"/>
      <JsonPath Expr="author_url" Id="AuthorUrl" Title="User URL"/>
    </Parse>
		<Fail>
			<Regex Expr="^No URL Match$" Group="0"/>
		</Fail>
  </RestConnector>

  <RestConnector Id="HashtagFeed" Title="Post Feed" Group="Hashtags">
    <Parameters>
      <Text Id="Hashtag" Title="Hashtag" Required="true" Debug.DefaultValue="summer"/>
      <Select Id="CaptionLanguage" Title="Accessibility Caption Language" DefaultValue="en">
        <DataSource>
          <ISOLanguageCodes/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="70" EvenPages="false">
      <Parse>
				<JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.page_info.end_cursor" Id="Cursor"/>
				<JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.page_info.has_next_page" Id="HasNextPage" Converter="Bool" DefaultValue="false"/>
      </Parse>
    </Paging>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Accept-Language'>@Model.CaptionLanguage</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/explore/tags/@(StripHashtag())/?__a=1
				@((Model.PageCursor.Page != 0 && Model.HasNextPage) ? "&max_id=" + Model.Cursor : "")
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.edges[*].node">
				<Compute Expr="https://www.instagram.com/p/@Model.Inp" Id="Url" Title="URL">
					<JsonPath Expr="shortcode" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="taken_at_timestamp" Id="Created" Converter="DateTime" Converter.SourceFormat="Unix"/>
				<JsonPath Expr="edge_media_to_caption.edges[0].node.text" Id="Caption" DefaultValue=""/>
				<Compute Id="Type" Title="Type">
					<Compute.Expr>
						<![CDATA[
						@Regex.Replace(Model.Inp, "Graph", "")
						]]>
					</Compute.Expr>
					<JsonPath Expr="__typename" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="edge_liked_by.count" Id="Likes" Converter="Long"/>
				<JsonPath Expr="edge_media_to_comment.count" Id="Comments" Converter="Long"/>
				<JsonPath Expr="dimensions.height" Id="Height" Converter="Long"/>
				<JsonPath Expr="dimensions.width" Id="Width" Converter="Long"/>
				<JsonPath Expr="display_url" Id="DisplayUrl" Title="Display URL"/>
				<JsonPath Expr="thumbnail_src" Id="Thumbnail"/>
				<JsonPath Expr="owner.id" Id="OwnerId" Converter="Auto"/>
				<Compute Id="AccessibilityCaption" Title="Accessibility Caption">
					<Compute.Expr>
						<![CDATA[
						@{
							string output = Model.Inp;
							string NoPrediction = "";
							string IntroSentence = "";

							var dictLangs = new Dictionary<string, string>();
							dictLangs.Add("en", "No photo description,Image may contain: ");
							dictLangs.Add("sv", "Ingen fotobeskrivning,Bilden kan innehålla: ");
							dictLangs.Add("nb", "Ingen bildebeskrivelse er tilgjengelig.,Bildet kan inneholde: ");
							dictLangs.Add("da", "Ingen tilgængelig billedbeskrivelse.,Billedet indeholder sandsynligvis: ");
							dictLangs.Add("fi", "Kuvan kuvausta ei ole saatavilla.,Kuvan mahdollinen sisältö: ");
							dictLangs.Add("de", "Keine Fotobeschreibung verfügbar.,Bild könnte enthalten: ");
							dictLangs.Add("es", "No hay descripción de la foto disponible.,La imagen puede contener: ");

							if (dictLangs.ContainsKey(Model.CaptionLanguage))
							{
								NoPrediction = dictLangs[Model.CaptionLanguage].Split(',')[0];
								IntroSentence = dictLangs[Model.CaptionLanguage].Split(',')[1];

								if(!Model.Inp.Contains(NoPrediction) && !string.IsNullOrEmpty(Model.Inp))
								{
									output = Regex.Replace(Model.Inp, @IntroSentence, "");
									output = Regex.Replace(output, @"^.*?\.$?", "");
								}
							}
						}
						@output
						]]>
					</Compute.Expr>
					<JsonPath Expr="accessibility_caption" Id="Inp" DefaultValue=""/>
				</Compute>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="HashtagTopPosts" Title="Top Posts" Group="Hashtags">
    <Parameters>
      <Text Id="Hashtag" Title="Hashtag" Required="true" Debug.DefaultValue="summer"/>
      <Select Id="CaptionLanguage" Title="Accessibility Caption Language" DefaultValue="en">
        <DataSource>
          <ISOLanguageCodes/>
        </DataSource>
      </Select>
    </Parameters>
    <Paging PageSize="10" MaxTake="10"/>
    <Fetch>
      <HttpSettings>
        <RequestHeaders>
          <Header Name='Accept-Language'>@Model.CaptionLanguage</Header>
        </RequestHeaders>
      </HttpSettings>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/explore/tags/@(StripHashtag())/?__a=1
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_top_posts.edges[*].node">
				<Compute Expr="https://www.instagram.com/p/@Model.Inp" Id="Url" Title="URL">
					<JsonPath Expr="shortcode" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="taken_at_timestamp" Id="Created" Converter="DateTime" Converter.SourceFormat="Unix"/>
				<JsonPath Expr="edge_media_to_caption.edges[0].node.text" Id="Caption" DefaultValue=""/>
				<Compute Id="Type" Title="Type">
					<Compute.Expr>
						<![CDATA[
						@Regex.Replace(Model.Inp, "Graph", "")
						]]>
					</Compute.Expr>
					<JsonPath Expr="__typename" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="edge_liked_by.count" Id="Likes" Converter="Long"/>
				<JsonPath Expr="edge_media_to_comment.count" Id="Comments" Converter="Long"/>
				<JsonPath Expr="dimensions.height" Id="Height" Converter="Long"/>
				<JsonPath Expr="dimensions.width" Id="Width" Converter="Long"/>
				<JsonPath Expr="display_url" Id="DisplayUrl" Title="Display URL"/>
				<JsonPath Expr="thumbnail_src" Id="Thumbnail"/>
				<JsonPath Expr="owner.id" Id="OwnerId" Converter="Auto"/>
				<Compute Id="AccessibilityCaption" Title="Accessibility Caption">
					<Compute.Expr>
						<![CDATA[
						@{
							string output = Model.Inp;
							string NoPrediction = "";
							string IntroSentence = "";

							var dictLangs = new Dictionary<string, string>();
							dictLangs.Add("en", "No photo description,Image may contain: ");
							dictLangs.Add("sv", "Ingen fotobeskrivning,Bilden kan innehålla: ");
							dictLangs.Add("nb", "Ingen bildebeskrivelse er tilgjengelig.,Bildet kan inneholde: ");
							dictLangs.Add("da", "Ingen tilgængelig billedbeskrivelse.,Billedet indeholder sandsynligvis: ");
							dictLangs.Add("fi", "Kuvan kuvausta ei ole saatavilla.,Kuvan mahdollinen sisältö: ");
							dictLangs.Add("de", "Keine Fotobeschreibung verfügbar.,Bild könnte enthalten: ");
							dictLangs.Add("es", "No hay descripción de la foto disponible.,La imagen puede contener: ");

							if (dictLangs.ContainsKey(Model.CaptionLanguage))
							{
								NoPrediction = dictLangs[Model.CaptionLanguage].Split(',')[0];
								IntroSentence = dictLangs[Model.CaptionLanguage].Split(',')[1];

								if(!Model.Inp.Contains(NoPrediction) && !string.IsNullOrEmpty(Model.Inp))
								{
									output = Regex.Replace(Model.Inp, @IntroSentence, "");
									output = Regex.Replace(output, @"^.*?\.$?", "");
								}
							}
						}
						@output
						]]>
					</Compute.Expr>
					<JsonPath Expr="accessibility_caption" Id="Inp" DefaultValue=""/>
				</Compute>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="RelatedHashtags" Title="Related Hashtags" Group="Hashtags">
    <Parameters>
      <Text Id="Hashtag" Title="Hashtag" Required="true" Debug.DefaultValue="summer"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/explore/tags/@(StripHashtag())/?__a=1
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_related_tags.edges[*].node">
				<JsonPath Expr="name" Id="Name" Converter="String" DefaultValue=""/>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="HashtagCount" Title="Post Count" Group="Hashtags">
    <Parameters>
      <Text Id="Hashtag" Title="Hashtag" Required="true" Debug.DefaultValue="summer"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/explore/tags/@(StripHashtag())/?__a=1
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
			<JsonPath Expr="$.graphql.hashtag.edge_hashtag_to_media.count" Id="Count" Converter="Long" DefaultValue="0"/>
    </Parse>
  </RestConnector>

  <RestConnector Id="AccountSearch" Title="Search for Accounts" Group="Accounts">
    <Parameters>
      <Text Id="Query" Title="Query" Required="true" Debug.DefaultValue="zaralarsson"/>
    </Parameters>
    <Paging PageSize="100" MaxTake="100"/>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/web/search/topsearch/?context=user&query=@Utils.UrlEncode(Model.Query)
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.users[*].user">
				<Compute Expr="https://www.instagram.com/@Model.Inp" Id="Url" Title="URL">
					<JsonPath Expr="username" Id="Inp" DefaultValue=""/>
				</Compute>
				<JsonPath Expr="username" Id="Username" Converter="String"/>
				<JsonPath Expr="pk" Id="UserId" Title="User Id" Converter="Auto"/>
				<JsonPath Expr="full_name" Id="FullName" Title="Full Name" Converter="String"/>
				<JsonPath Expr="is_private" Id="Private" Converter="Bool"/>
				<JsonPath Expr="is_verified" Id="Verified" Converter="Bool"/>
				<JsonPath Expr="profile_pic_url" Id="Avatar" Converter="String"/>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="HashtagSearch" Title="Search for Hashtags" Group="Hashtags">
    <Parameters>
      <Text Id="Query" Title="Query" Required="true" Debug.DefaultValue="zaralarsson"/>
    </Parameters>
    <Paging PageSize="100" MaxTake="100"/>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/web/search/topsearch/?context=hashtag&query=@Utils.UrlEncode(Model.Query)
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.hashtags[*].hashtag">
				<JsonPath Expr="name" Id="Hashtag" Converter="String"/>
				<JsonPath Expr="media_count" Id="Count" Title="Count" Converter="Long"/>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="PlacesSearch" Title="Search for Places" Group="Places">
    <Parameters>
      <Text Id="Query" Title="Query" Required="true" Debug.DefaultValue="stockholm"/>
    </Parameters>
    <Paging PageSize="100" MaxTake="100"/>
    <Fetch>
      <Fetch.Url>
        <![CDATA[
        https://www.instagram.com/web/search/topsearch/?context=place&query=@Utils.UrlEncode(Model.Query)
        ]]>
      </Fetch.Url>
		</Fetch>
    <Parse>
      <JsonPath Expr="$.places[*].place">
				<JsonPath Expr="location.name" Id="Name" Converter="String"/>
				<JsonPath Expr="location.pk" Id="PlaceId" Title="Place Id" Converter="String"/>
				<JsonPath Expr="location.address" Id="Address" Converter="String"/>
				<JsonPath Expr="location.city" Id="City" Converter="String"/>
				<JsonPath Expr="location.short_name" Id="ShortName" Title="Short Name" Converter="String"/>
				<JsonPath Expr="location.lng" Id="Longitude" Converter="String"/>
				<JsonPath Expr="location.lat" Id="Latitude" Converter="String"/>
				<JsonPath Expr="location.external_source" Id="ExternalSource" Title="External Source" Converter="Auto"/>
				<JsonPath Expr="location.facebook_places_id" Id="FacebookPlaceId" Title="Facebook Place Id" Converter="String"/>
			</JsonPath>
    </Parse>
  </RestConnector>

  <RazorFunctions>
    <![CDATA[
    string FetchPostString() {
			return (Model.Post.Contains("instagram.com") ? Model.Post : "https://www.instagram.com/p/" + Model.Post);
    }
    string FetchUserString() {
			string input = Model.User.StartsWith("@") ? Model.User.Substring(1) : Model.User;
			return input.Contains("instagram.com") ? input : "https://www.instagram.com/" + input;
    }
		string DecodeAvatarUrl(string url) {
			return url.Replace(@"\u0026","&");
		}
		string StripHashtag() {
			return Model.Hashtag.StartsWith("#") ? Model.Hashtag.Substring(1) : Model.Hashtag;
		}
    ]]>
  </RazorFunctions>

</Suite>