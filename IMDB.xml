<?xml version="1.0" encoding="utf-8" ?>
<Suite Category="Movies" RequireVersion="7.0.0" Title="IMDB" Id="IMDB" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/IMDB.xml" HelpUrl="http://seotoolsforexcel.com/imdb" HelpText="Documentation">

  <Author Name="Victor" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <Resources>
    <Resource Id="Sortings">
      <Item Id="rk" Title="Ranking"/>
      <Item Id="ir" Title="Rating"/>
      <Item Id="us" Title="Release Date"/>
      <Item Id="nv" Title="Number of Votes"/>
    </Resource>
    <Resource Id="SortingsOscars">
      <Item Id="year" Title="Year"/>
      <Item Id="moviemeter" Title="Popularity"/>
      <Item Id="alpha" Title="Alphabetical"/>
      <Item Id="user_rating" Title="Rating"/>
      <Item Id="num_votes" Title="Votes"/>
      <Item Id="boxoffice_gross_us" Title="US Box Office"/>
      <Item Id="runtime" Title="Runtime"/>
      <Item Id="release_date" Title="Release Date"/>
    </Resource>
    <Resource Id="SortingsPersons">
      <Item Id="starmeter" Title="Popularity"/>
      <Item Id="alpha" Title="Alphabetical"/>
      <Item Id="birth_date" Title="Birth Date"/>
      <Item Id="death_date" Title="Death Date"/>
    </Resource>
    <Resource Id="SortingsReviews">
      <Item Id="help" Title="Helpfullness"/>
      <Item Id="date" Title="Date"/>
      <Item Id="votes" Title="Total Votes"/>
    </Resource>
  </Resources>

  <RestConnector Id="Top250" Title="Toplists - Top 250">
    <Parameters>
      <Radio Id="Type" Title="Type" DefaultValue="moviemeter" Required="false">
        <DataSource>
          <Item Id="top" Title="Movies"/>
          <Item Id="toptv" Title="Television"/>
        </DataSource>
      </Radio>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="rk">
        <DataSource>
          <Resource Id="Sortings"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="asc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/chart/@(Model.Type)?
        sort=@(Model.Sorting),@(Model.Direction)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <XPath Expr="a" Title="Title" Id="Title" Converter="String"/>
        <XPath Expr="span" Title="Year" Id="Year" Converter="Int"/>
			</XPath>
      <XPath Expr="//td[@@class='ratingColumn imdbRating']">
        <XPath Expr="." Title="Rating" Id="Rating" Converter="Double"/>
        <Compute Id="Votes" Title="Votes" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"on\s([\d,]+)\s");
              Match match = regex.Match(Model.VotesInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="strong" Id="VotesInput" Attribute="title" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="Bottom100" Title="Toplists - Bottom 100">
    <Parameters>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="rk">
        <DataSource>
          <Resource Id="Sortings"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="asc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/chart/bottom?
        sort=@(Model.Sorting),@(Model.Direction)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <XPath Expr="a" Title="Title" Id="Title" Converter="String"/>
        <XPath Expr="span" Title="Year" Id="Year" Converter="Int"/>
			</XPath>
      <XPath Expr="//td[@@class='ratingColumn imdbRating']">
        <XPath Expr="." Title="Rating" Id="Rating" Converter="Double"/>
        <Compute Id="Votes" Title="Votes" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"on\s([\d,]+)\s");
              Match match = regex.Match(Model.VotesInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="strong" Id="VotesInput" Attribute="title" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="MostPopular" Title="Toplists - Most Popular">
    <Parameters>
      <Radio Id="Type" Title="Type" DefaultValue="moviemeter" Required="false">
        <DataSource>
          <Item Id="moviemeter" Title="Movies"/>
          <Item Id="tvmeter" Title="Television"/>
        </DataSource>
      </Radio>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="rk">
        <DataSource>
          <Resource Id="Sortings"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="asc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/chart/@(Model.Type)?
        sort=@(Model.Sorting),@(Model.Direction)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <XPath Expr="a" Title="Title" Id="Title" Converter="String"/>
        <XPath Expr="span" Title="Year" Id="Year" Converter="Int"/>
			</XPath>
      <XPath Expr="//td[@@class='ratingColumn imdbRating']">
        <XPath Expr="." Title="Rating" Id="Rating" Converter="Double"/>
        <Compute Id="Votes" Title="Votes" Converter="Long" DefaultValue="0">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"on\s([\d,]+)\s");
              Match match = regex.Match(Model.VotesInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="strong" Id="VotesInput" Attribute="title" Converter="String" DefaultValue=""/>
        </Compute>
			</XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmsInTheaters" Title="Films - In Theaters">
    <Parameters>
      <Radio Id="Category" Title="Category" DefaultValue="inth_cs" Required="false">
        <DataSource>
          <Item Id="in-theaters" Title="In Theaters"/>
          <Item Id="coming-soon" Title="Coming Soon"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
          http://www.imdb.com/movies-@(Model.Category)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//h4[@@itemprop='name']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//h4[@@itemprop='name']">
        <XPath Expr="." Title="Title" Id="Title" Converter="String"/>
			</XPath>
      <XPath Expr="//p[@@class='cert-runtime-genre']">
        <Compute Id="Duration" Title="Duration" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"^(\d+)\s");
              Match match = regex.Match(Model.DurationInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="DurationInput" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//div[@@itemprop='description']">
        <XPath Expr="." Title="Description" Id="Description" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='rating_txt']">
        <XPath Expr="span[contains(@@class,'metascore')]" Title="Metascore" Id="Metascore" Converter="Auto" DefaultValue=""/>
			</XPath>
      <XPath Expr="//p[@@class='cert-runtime-genre']">
        <XPath Expr="img" Title="Rated" Id="Rated" Attribute="alt" Converter="String" DefaultValue=""/>
			</XPath>
      <XPath Expr="//p[@@class='cert-runtime-genre']">
        <Compute Id="Genres" Title="Genres" Converter="String">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\s-\s(.*?)$");
              Match match = regex.Match(Model.GenresInput);
              string output = match.Groups[1].Value;
              string output2 = Regex.Replace(output, @"\s\|\s", ", ");
            }
            @output2
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="GenresInput" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//span[@@itemprop='director']//ancestor::div[@@class='txt-block']">
        <Compute Id="Directors" Title="Directors" Converter="String">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"Directors?:\s(.*?)$");
              Match match = regex.Match(Model.DirectorsInput);
              string output = match.Groups[1].Value;
              string output2 = Regex.Replace(output, @"\s\|\s", ", ");
            }
            @output2
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="DirectorsInput" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//span[@@itemprop='actors']//ancestor::div[@@class='txt-block']">
        <Compute Id="Actors" Title="Actors" Converter="String">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"Star?s:\s(.*?)$");
              Match match = regex.Match(Model.ActorsInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="ActorsInput" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//h4[@@itemprop='name']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="TopBoxOffice" Title="Toplists - Box Office">
    <Parameters>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/chart/boxoffice
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <XPath Expr="a" Title="Title" Id="Title" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@class='ratingColumn'][1]">
        <XPath Expr="." Title="Weekend" Id="Weekend" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@class='ratingColumn'][2]">
        <XPath Expr="." Title="Gross" Id="Gross" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@class='weeksColumn']">
        <XPath Expr="." Title="Weeks" Id="Weeks" Converter="Long"/>
			</XPath>
      <XPath Expr="//td[@@class='titleColumn']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmsOscarWinners" Title="Films - Oscar Winners">
    <Parameters>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="year">
        <DataSource>
          <Resource Id="SortingsOscars"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="desc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/search/title?count=100&groups=oscar_best_picture_winners
        &sort=@(Model.Sorting),@(Model.Direction)
        &view=advanced
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <XPath Expr="a" Title="Title" Id="Title" Converter="String"/>
			</XPath>
      <XPath Expr="//h3[@@class='lister-item-header']/span[contains(@@class,'item-year')]">
        <Compute Id="Year" Title="Year" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\d+");
              Match match = regex.Match(Model.YearInput);
              string output = match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="YearInput" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//span[@@class='runtime']">
        <Compute Id="Duration" Title="Duration" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"^(\d+)\s");
              Match match = regex.Match(Model.DurationInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="DurationInput" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//p[@@class='text-muted']">
        <XPath Expr="." Title="Description" Id="Description" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='inline-block ratings-imdb-rating']">
        <XPath Expr="." Title="Rating" Id="Rating" Attribute="data-value" Converter="Double"/>
			</XPath>
      <XPath Expr="//span[@@name='nv'][1]">
        <XPath Expr="." Title="Votes" Id="Votes" Attribute="data-value" Converter="Long"/>
			</XPath>
      <XPath Expr="//span[@@name='nv'][2]">
        <XPath Expr="." Title="Gross" Id="Gross" Attribute="data-value" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='ratings-bar']">
        <XPath Expr="div/span[contains(@@class,'metascore')]" Title="Metascore" Id="Metascore" Converter="Auto" DefaultValue=""/>
			</XPath>
      <XPath Expr="//span[@@class='genre']">
        <XPath Expr="." Id="Genre" Title="Genre" Converter="String"/>
      </XPath>
      <XPath Expr="//p[contains(.,'irector')]/a[1]">
        <XPath Expr="." Id="Directors" Title="Directors" Converter="String"/>
			</XPath>
      <XPath Expr="//p[contains(.,'tars')]/a[2]">
        <XPath Expr="." Id="Actors" Title="Actors" Converter="String"/>
			</XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="PersonsBornToday" Title="Persons - Born Today">
    <Parameters>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="starmeter">
        <DataSource>
          <Resource Id="SortingsPersons"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="asc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Paging PageSize="50" EvenPages="true"/>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        https://www.imdb.com/search/name?birth_monthday=
        @DateTime.Today.ToString("MM-dd")
        &refine=birth_monthday
        &sort=@(Model.Sorting),@(Model.Direction)
        @if(Model.PageCursor.Page != 0)
        {
         @: &start=@(Model.PageCursor.NextTake+1)
        }
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/(nm\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <XPath Expr="a" Title="Name" Id="Name" Converter="String"/>
			</XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/nm\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="PersonsMostPopular" Title="Persons - Most Popular">
    <Parameters>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="starmeter">
        <DataSource>
          <Resource Id="SortingsPersons"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="asc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
    </Parameters>
    <Paging PageSize="50" EvenPages="true"/>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/search/name?gender=male,female
        &sort=@(Model.Sorting),@(Model.Direction)
        @if(Model.PageCursor.Page != 0)
        {
         @: &start=@(Model.PageCursor.NextTake+1)
        }
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/(nm\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <XPath Expr="a" Title="Name" Id="Name" Converter="String"/>
			</XPath>
      <XPath Expr="//h3[@@class='lister-item-header']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/nm\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmFullCast" Title="Film - Full Cast">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/fullcredits
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//td[@@itemprop='actor']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/(nm\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//td[@@itemprop='actor']">
        <XPath Expr="." Title="Name" Id="Name" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@class='character']">
        <XPath Expr="." Title="Character" Id="Character" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@itemprop='actor']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/name\/nm\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmOthersLikes" Title="Film - Others Like">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//div[@@class='rec_item']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//div[@@class='rec_item']/a/img">
        <XPath Expr="." Title="Title" Id="Title" Attribute="alt" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='rec_item']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="ReviewsUsers" Title="Film - Reviews - User">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
      <Select Id="Sorting" Title="Sorting" Required="false" DefaultValue="help">
        <DataSource>
          <Resource Id="SortingsReviews"/>
        </DataSource>
      </Select>
      <Radio Id="Direction" Title="Direction" DefaultValue="desc" Required="false">
        <DataSource>
          <Item Id="desc" Title="Descending"/>
          <Item Id="asc" Title="Ascending"/>
        </DataSource>
      </Radio>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/reviews
        ?sort=@(Model.Sorting)
        &dir=@(Model.Direction)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//div[@@class='title']">
        <XPath Expr="." Title="Title" Id="Title" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='lister-item-content']">
        <Compute Id="Rating" Title="Rating" Converter="Auto" DefaultValue="">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\d+");
              Match match = regex.Match(Model.RatingInput);
              string output = match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="div/span[@@class='rating-other-user-rating']" Id="RatingInput" Converter="String" DefaultValue=""/>
        </Compute>
			</XPath>
      <XPath Expr="//span[@@class='review-date']">
        <XPath Expr="." Title="Date" Id="Date" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='content']">
        <XPath Expr="." Title="Text" Id="Text" Converter="String"/>
			</XPath>
      <XPath Expr="//span[@@class='display-name-link']">
        <Compute Id="Id" Title="User Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/user\/(ur\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
      <XPath Expr="//span[@@class='display-name-link']">
        <XPath Expr="." Title="User" Id="User" Converter="String"/>
			</XPath>
      <XPath Expr="//span[@@class='display-name-link']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/user\/ur\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="ReviewsExternal" Title="Film - Reviews - External">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/externalreviews?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//ul[@@class='simpleList']/li">
        <Compute Id="Publisher" Title="Publisher">
          <Compute.Expr>
            <![CDATA[
            @{
              string output = Regex.Replace(Model.PublisherInput, @"\[(.*?)\]", "");
              string output2 = Regex.Replace(output, @"\((.*?)\)", "");
            }
            @output2
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="PublisherInput" Converter="String"/>
        </Compute>
        <Compute Id="Author" Title="Author">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\[(.*?)\]");
              Match match = regex.Match(Model.TitleInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="TitleInput" Converter="String"/>
        </Compute>
        <Compute Id="Language" Title="Language">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\((.*?)\)");
              Match match = regex.Match(Model.TitleInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="TitleInput" Converter="String"/>
        </Compute>
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              string output = "https://imdb.com" + Model.LinkInput;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="ReviewsMetacritic" Title="Film - Reviews - Metacritic">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/criticreviews?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//b[@@itemprop='publisher']">
        <XPath Expr="." Title="Publisher" Id="Publisher" Converter="String"/>
			</XPath>
      <XPath Expr="//span[@@itemprop='author']">
        <XPath Expr="." Title="Author" Id="Author" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='critscore critscore_favorable']">
        <XPath Expr="." Title="Metascore" Id="Metascore" Converter="Long"/>
			</XPath>
      <XPath Expr="//div[@@class='summary']">
        <XPath Expr="." Title="Summary" Id="Summary" Converter="String"/>
			</XPath>
      <XPath Expr="//td[@@class='review']">
        <XPath Expr="a" Title="Link" Id="Link" Attribute="href" Converter="String" DefaultValue=""/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmReleaseDates" Title="Film - Release Dates">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/releaseinfo?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//table[@@id='release_dates']/tr">
        <XPath Expr="td[1]/a" Title="Country" Id="Country" Converter="String"/>
        <XPath Expr="td[2]" Title="Date" Id="Date" Converter="String"/>
        <XPath Expr="td[3]" Title="Location" Id="Location" Converter="String"/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmAKA" Title="Film - Also Known As">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/releaseinfo?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//table[@@id='akas']/tr">
        <XPath Expr="td[1]" Title="Region" Id="Region" Converter="String"/>
        <XPath Expr="td[2]" Title="Title" Id="Title" Converter="String"/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmPlotKeywords" Title="Film - Plot Keywords">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/keywords?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//div[@@class='sodatext']">
        <XPath Expr="." Title="Keyword" Id="Keyword" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='interesting-count-text']">
        <Compute Id="Score" Title="Score" Converter="Long">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"^\d+");
              Match match = regex.Match(Model.RelevanceInput);
              string output = match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="RelevanceInput" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmPhotos" Title="Film - Photos">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/mediaindex?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//a[@@itemprop='thumbnailUrl']">
        <XPath Expr="." Title="Caption" Id="Caption" Attribute="title" Converter="String"/>
        <XPath Expr="img" Title="Thumbnail" Id="Thumbnail" Attribute="src" Converter="String"/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="FilmPhotos" Title="Film - Photos">
    <Parameters>
      <Text Id="Id" Title="Film Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0068646"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/mediaindex?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//a[@@itemprop='thumbnailUrl']">
        <XPath Expr="." Title="Caption" Id="Caption" Attribute="title" Converter="String"/>
        <XPath Expr="img" Title="Thumbnail" Id="Thumbnail" Attribute="src" Converter="String"/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="PersonFilmography" Title="Person - Filmography">
    <Parameters>
      <Text Id="Id" Title="Person Id (Begins with &quot;nm&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="nm1172478"/>
    </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        https://www.imdb.com/name/@(Model.Id)/?nmdp=1&ref_=nm_ql_4#filmography
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//div[@@class='filmo-category-section']/div/b">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
      <XPath Expr="//div[@@class='filmo-category-section']/div/b/a">
        <XPath Expr="." Title="Title" Id="Title" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='filmo-category-section']/div/span[@@class='year_column']">
        <Compute Id="Year" Title="Year" Converter="auto">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\d+");
              Match match = regex.Match(Model.YearInput);
              string output = match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="." Id="YearInput" Converter="String" DefaultValue=""/>
        </Compute>
			</XPath>
      <XPath Expr="//div[@@class='filmo-category-section']/div/b">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="PersonPhotos" Title="Person - Photos">
    <Parameters>
      <Text Id="Id" Title="Person Id (Begins with &quot;nm&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="nm1172478"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/name/@(Model.Id)/mediaindex?
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//a[@@itemprop='thumbnailUrl']">
        <XPath Expr="." Title="Caption" Id="Caption" Attribute="title" Converter="String"/>
        <XPath Expr="img" Title="Thumbnail" Id="Thumbnail" Attribute="src" Converter="String"/>
			</XPath>
    </Parse>
  </RestConnector>

  <RestConnector Id="SeriesEpisodes" Title="Series - Episodes">
    <Parameters>
      <Text Id="Id" Title="TV Series Id (Begins with &quot;tt&quot;)" DefaultValue="" Required="true" Debug.DefaultValue="tt0285331"/>
      <Text Id="SeasonId" Title="Season Number" DefaultValue="" Required="true" Debug.DefaultValue="1"/>
     </Parameters>
    <Fetch>
      <Fetch.Url>
			<![CDATA[
        http://www.imdb.com/title/@(Model.Id)/episodes?season=@(Model.SeasonId)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <XPath Expr="//div[@@class='info']">
        <Compute Id="Id" Title="Id">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/(tt\d+)");
              Match match = regex.Match(Model.LinkInput);
              string output = match.Groups[1].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="strong/a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
        <XPath Expr="meta[@@itemprop='episodeNumber']" Title="Episode" Id="Episode" Attribute="content" Converter="Long"/>
        <XPath Expr="strong/a" Title="Title" Id="Title" Converter="String"/>
        <XPath Expr="div[@@class='airdate']" Title="Date" Id="Date" Converter="String"/>
			</XPath>
      <XPath Expr="//div[@@class='ipl-rating-star ']">
        <XPath Expr="span[@@class='ipl-rating-star__rating']" Title="Rating" Id="Rating" Converter="Double"/>
        <XPath Expr="span[@@class='ipl-rating-star__total-votes']" Title="Votes" Id="Votes" Converter="Long"/>
			</XPath>
      <XPath Expr="//div[@@class='info']">
        <Compute Id="Link" Title="Link">
          <Compute.Expr>
            <![CDATA[
            @{
              Regex regex = new Regex(@"\/title\/tt\d+");
              Match match = regex.Match(Model.LinkInput);
              string output = "https://imdb.com" + match.Groups[0].Value;
            }
            @output
            ]]>
          </Compute.Expr>
        <XPath Expr="strong/a" Id="LinkInput" Attribute="href" Converter="String"/>
        </Compute>
      </XPath>
    </Parse>
  </RestConnector>

</Suite>