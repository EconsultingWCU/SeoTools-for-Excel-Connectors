<?xml version="1.0" encoding="utf-8" ?>
<Suite Title="GeoNames" Id="GeoNames" RequireVersion="6.1.2" Category="Others" SourceUrl="https://github.com/nielsbosma/SeoTools-for-Excel-Connectors/blob/master/GeoNames.xml" HelpUrl="http://seotoolsforexcel.com/GeoNames/" HelpText="Documentation">

  <Author Name="Victor Sandberg" Url="http://community.seotoolsforexcel.com/users/diskborste/activity"/>

  <Settings HelpText="What's this?" HelpUrl="http://seotoolsforexcel.com/GeoNames/">
    <Text Id="Username" Title="Username" Required="true" HelpUrl="http://seotoolsforexcel.com/GeoNames/"/>
  </Settings>

	<RestConnector Id="LocationSearch" Title="Location Search" HelpUrl="http://www.geonames.org/export/geonames-search.html">
    <Parameters>
      <Text Id="Query" Title="Query" Required="true" DefaultValue="" Debug.DefaultValue="jönköping" HelpText="Search place name, country name, continent etc."/>
      <Radio Id="SearchMode" Title="Search Mode" DefaultValue="default" Required="false" HelpText="Fuzzy means finding results even if the search terms are incorrectly spelled.">
        <DataSource>
					<Item Id="name" Title="Default"/>
					<Item Id="name_equals" Title="Exact"/>
					<Item Id="name_starts" Title="Starts With"/>
          <Item Id="fuzzy" Title="Fuzzy"/>
        </DataSource>
      </Radio>
      <Text Id="CountryFilter" Title="Filter by Country Codes" Required="false" DefaultValue="" Debug.DefaultValue="" HelpText="Enter one or more Country Codes (ISO-3166) separated by a comma."/>
    </Parameters>
    <Paging PageSize="100" EvenPages="false">
      <Parse>
        <JsonPath Id="AvaliableRows" Expr="totalResultsCount"/>
      </Parse>
    </Paging>
	<Fetch>
    <Fetch.Url>
      <![CDATA[
      http://api.geonames.org/searchJSON?
			@(Model.SearchMode)=@(Utils.UrlEncode(Model.Query))
			}
			@if(Model.SearchMode == "fuzzy")
			{
				@: &fuzzy=0
			}
			@if(Model.CountryFilter != "")
			{
				@: &country=@(FetchCountryFilter())
			}
			&maxRows=@(Model.PageCursor.PageSize)
			&startRow=@(Model.PageCursor.NextSkip)
			&username=@(Model.Username)
      ]]>
      </Fetch.Url>
    </Fetch>
    <Parse>
      <JsonPath Expr="geonames.*">
				<JsonPath Expr="name" Id="Name" Title="Name" Converter="String" HelpText="Localized name, the preferred name in the optional language parameter."/>
				<JsonPath Expr="fcodeName" Id="Type" Title="Type" Converter="String" HelpText="The classification of the location."/>
				<JsonPath Expr="adminName1" Id="Region" Title="Region" Converter="String" HelpText="Region of location."/>
				<JsonPath Expr="countryName" Id="CountryName" Title="Country Name" Converter="String" HelpText="Country Name which the location belongs to."/>
				<JsonPath Expr="countryCode" Id="CountryCode" Title="Country Code" Converter="String" HelpText="Country Code which the location belongs to."/>
				<JsonPath Expr="population" Id="Population" Title="Population" Converter="Long" HelpText="Population of the location."/>
				<JsonPath Expr="toponymName" Id="ToponymName" Title="Toponym Name" Converter="String" HelpText="main name of the toponym as displayed on the google maps interface page."/>
				<JsonPath Expr="lat" Id="Latitude" Title="Latitude" Converter="Double" HelpText="Latitude of location."/>
				<JsonPath Expr="lng" Id="Longitude" Title="Longitude" Converter="Double" HelpText="Longitude of location."/>
      </JsonPath>
    </Parse>
    <Fail>
      <JsonPath Expr="status.message"/>
    </Fail>
  </RestConnector>

  <RazorFunctions>
  <![CDATA[
	string FetchCountryFilter()
	{
		string[] lines = ((string)Model.CountryFilter).Trim().Split(',').Select(e => e.Trim()).Where(e => !string.IsNullOrEmpty(e)).ToArray();
		return string.Join("&country=",lines.Select((e, i) => Utils.UrlEncode(e)).ToArray());
	}
  ]]>
  </RazorFunctions>

</Suite>
